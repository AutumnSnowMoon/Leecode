//dp, the dp[i][j] is the substring(i,j) if a plindrome string, and the two side letters must the same 

class Solution {
public:
    string longestPalindrome(string s) {
        int len=s.size();
        int dp[len][len];
        
        for(int i=0;i<len;i++)
            for (int j=0;j<len;j++)
               dp[i][j]=0;
        
        dp[0][0]=1;
        for (int i=0;i<len;i++)
            for (int j=0;j<=i;j++)
                if(i==j) dp[i][j]=1;
                else if(i==(j+1)) {
                    if(s[i]==s[j]) dp[i][j]=1;
                    else dp[i][j]=0;
                }
                else{
                    if(dp[i-1][j+1] && s[i]==s[j]) dp[i][j]=1;
                    else dp[i][j]=0;
                }
        
        int flag[2];
        int maxx=0;
        
        for(int i=0;i<len;i++)
            for (int j=0;j<len;j++)
               if(dp[i][j]==1){
                    int tmp=i-j+1;
                    if(tmp>maxx) {flag[0]=i;flag[1]=j;maxx=tmp;}
                }
        
        string ans=s.substr(flag[1],flag[0]-flag[1]+1);
        
        return ans;
    }
};
