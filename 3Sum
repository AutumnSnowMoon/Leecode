bool cmp(vector<int> x, vector<int> y){
    return ((x[0]<y[0]) || (x[0]==y[0] && x[1]<y[1]) || (x[0]==y[0] && x[1]==y[1] &&x[2]<y[2])) ;
}

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int len=nums.size();
        vector <vector<int>> ans;
        if(len<3) return ans;
        else{
           sort(nums.begin(),nums.end()); 
           int flag=0;
           int kk=0;
           for(int i=0;i<len;i++){
               if(nums[i-kk]==0){
                   if(flag<=3) flag++;
                   else {nums.erase(nums.begin()+i-kk);kk++;}
               }
           }
           
           len=nums.size();
            
           int cnt=0;
           for(int i=0;i<len;i++){
              int tmp=-nums[i];
              int left=0,right=len-1;
              while(left<right){
                 if(nums[left]+nums[right]==tmp) {
                   if(i!=left && i!=right) {
                       vector<int> tmp={nums[left],nums[i],nums[right]};
                       sort(tmp.begin(),tmp.end());
                       if(cnt<1) {ans.push_back(tmp);cnt++;}
                       else{
                          int left2=0,right2=cnt-1;
                          while(left2<=right2){
                              int mid=(left2+right2)/2;
                              if(ans[mid][0]==tmp[0] && ans[mid][1]==tmp[1]){
                                  left2=-1;
                                  break;
                              }
                              else if(cmp(ans[mid],tmp)) left2=mid+1;
                              else right2=mid-1;
                          }
                        if(left2!=-1) {ans.insert(ans.begin()+left2,tmp);cnt++;}   
                        
                       }
                     }
                   right--;
                 }
                 else if(nums[left]+nums[right]>tmp) right--;
                 else left++;
              }
              
           }
        
            return ans;
        }
    }
};
